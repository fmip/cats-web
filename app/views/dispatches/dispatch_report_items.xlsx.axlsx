wb = xlsx_package.workbook
wb.styles do |style|

  

title_cell = style.add_style alignment: {horizontal: :center}, b: true, Sz: 20, bg_color: "000000", fg_color: "FF"
title_cell_table = style.add_style alignment: {horizontal: :center}, b: true, Sz: 10, bg_color: "000000", fg_color: "FF"
  
data = style.add_style alignment: {horizontal: :left, wrap_text: true}


 

  sheet = wb.add_worksheet(:name => 'Dispatch Items') 
  # { |ws| ws.sheet_protection.password = 'pa55w0rd' }
  col_width = [10,5,10,10,10,15,10,10]
  unlocked = sheet.styles.add_style(:locked => false )
  
   header     = sheet.styles.add_style :bg_color => "DD", :sz => 18, :b => true, :alignment => {:horizontal => :center}, :locked => true

  sheet.add_row []
  sheet.add_row []
  sheet.add_row ["", @hub&.to_s + "  NDRMC Dispatch Detail Report as of " + @date_min.to_s + " - " + @date_max.to_s ,""], style: [nil,header]
  sheet.add_row []
  sheet.add_row ["Printed Date: " + Time.now.strftime("%m/%d/%y")],style: []
  
  sheet.merge_cells "B3:H3"  
  sheet.column_widths *col_width
  sheet.add_row ["Dispatch Date",
            "Requisition No.",
            "Round/Month/Operation",
            "Region",
            "Zone",
            "Woreda ",
            "FDP",
            "Issue Ticket # ",
            "Transporter",
            "Plate No",
            "Trailer No",
            "Project code",
            "Commodity Class ", 
            "Commodity Type",
            "Rounded Allocation",
            "Dispatch Amount",
            "Balance",
            "Unit",
            "Store keeper Name", "Store Number" ],style: [ title_cell_table,  title_cell_table, title_cell_table, title_cell_table, title_cell_table, title_cell_table,  title_cell_table, title_cell_table, title_cell_table, title_cell_table, title_cell_table,  title_cell_table, title_cell_table, title_cell_table, title_cell_table,title_cell_table,  title_cell_table, title_cell_table, title_cell_table,title_cell_table]

 
  @sub_total_fdp = 0
  @dispatch_items.each_pair do |group_1, items|
            @new = true
            allocated = RequisitionItem.joins(:requisition).where(fdp_id: group_1[1], 'requisitions.requisition_no': group_1[0]).pluck('amount').first
            if !allocated.present?
              allocated = 0
            end
           
            
            fdp = Fdp.find(group_1[1])
            woreda = Location.find(fdp.location_id)

            items.each do |dispatch|
             @sub_total_fdp = @sub_total_fdp + dispatch&.quantity
 
    
    
                  if @new
                        @operation = Operation.find(dispatch&.operation_id)
                        @commodity = Commodity.find(dispatch&.commodity_id)
                        @uom_id = @operation&.ration&.ration_items.joins(:commodity).where('commodities.commodity_category_id': @commodity&.commodity_category_id)&.first&.unit_of_measure_id
                        @qtl = UnitOfMeasure.find_by(name: 'Quintal')
                        @unit = UnitOfMeasure.find(@uom_id)&.name
                        allocated = @qtl.convert_to(@unit, allocated)
                  end
    sheet.add_row [ dispatch&.dispatch_date.strftime('%d/%m/%Y'), dispatch&.requisition_number,
                    @operation&.name,
                    woreda&.parent&.parent&.name,
                    woreda&.parent&.name,
                    woreda&.name,
                    fdp&.name,
                    dispatch.gin_no,
                    dispatch.transporter,
                    dispatch.plate_number,
                    dispatch.trailer_plate_number,
                    dispatch.project_code,
                    CommodityCategory.find(dispatch&.commodity_category_id).name ,
                    
                    dispatch&.commodity_name,
                    number_with_delimiter(allocated,:delimiter => ','),
                    number_with_delimiter( dispatch&.quantity,:delimiter => ','),
                    number_with_delimiter(allocated - dispatch.quantity,:delimiter => ','),
                    dispatch.unit,
                    dispatch&.storekeeper_name,
                    Store.find_by(id: dispatch&.store_id)&.name], :style => [data, data, data, data, data, data, data, data,data, data, data, data,data, data, data, data,data,data, data,data]
    
                     @new = false
        end
        
         sheet.add_row ["Total allocated: " + allocated.to_s,"Total dispatched: " + @sub_total_fdp.to_s,"Balance:" + (allocated - @sub_total_fdp).to_s]
         
         sheet.add_row ["Percent completed: " + (ActionController::Base.helpers.number_with_precision(((@sub_total_fdp/(allocated )) * 100).to_s,precision: 2)).to_s + "%"]
         

         @sub_total_fdp = 0
        
  end
           
        
end